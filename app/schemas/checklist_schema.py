"""
Checklist data schemas for AI generation

This module defines the data structures used by the AI service to generate checklists.
These schemas DO NOT include IDs, versions, or timestamps - those are managed by .NET backend.
"""

from typing import Optional, List, Literal
from pydantic import BaseModel, Field


# ========== Tool Call Input Parameters ==========
class ChecklistGenerationParams(BaseModel):
    """
    Parameters extracted from user conversation by AI.
    Used as input for the generateChecklist tool call.
    """
    destination_city: str = Field(..., description="Destination city name (e.g., 'Sydney', 'Melbourne')")
    country: str = Field(..., description="Country name (e.g., 'Australia', 'Canada')")
    duration: str = Field(..., description="Stay duration (e.g., '3 months', '1 year')")
    purpose: Literal["work", "study", "leisure", "relocation"] = Field(..., description="Purpose of stay")

    # Optional context information
    budget: Optional[str] = Field(None, description="User's budget range (e.g., 'low', 'medium', 'high')")
    has_family: Optional[bool] = Field(None, description="Whether user is traveling with family")
    visa_type: Optional[str] = Field(None, description="Visa type if mentioned (e.g., 'work visa', 'student visa')")
    user_context: Optional[str] = Field(None, description="Additional user context from conversation")


# ========== AI Generated Item ==========
class GeneratedChecklistItem(BaseModel):
    """
    Single checklist item generated by AI.
    Note: No item ID - assigned by .NET backend.
    """
    title: str = Field(..., description="Item title (e.g., 'Get Opal card for transport')")
    description: str = Field(..., description="Detailed description with actionable steps")
    importance: Literal["urgent", "high", "medium", "low"] = Field(..., description="Item importance level (frontend extends backend's Low|Medium|High with 'urgent')")
    category: str = Field(..., description="Category (e.g., 'Transport', 'Banking', 'Healthcare')")
    due_days: int = Field(..., description="Days from now (e.g., 7 = 7 days later)")
    order: int = Field(..., description="Display order (0, 1, 2, ...)")


# ========== AI Generated City Info ==========
class GeneratedCityInfo(BaseModel):
    """
    City information identified and enriched by AI.
    """
    city_code: str = Field(..., description="Normalized city code (e.g., 'sydney')")
    city_name: str = Field(..., description="City display name (e.g., 'Sydney')")
    country: str = Field(..., description="Country name (e.g., 'Australia')")
    hero_image_url: str = Field(..., description="Unsplash image URL for city hero image")
    tagline: str = Field(..., description="AI-generated city tagline")


# ========== AI Generated Checklist (Output) ==========
class GeneratedChecklist(BaseModel):
    """
    Complete checklist generated by AI service.
    This is sent to .NET backend for persistence.

    Note: No IDs, versions, or timestamps - .NET backend adds those.
    """
    # AI-generated metadata
    title: str = Field(..., description="Checklist title (e.g., 'Sydney 3-Month Work Settlement Plan')")
    summary: str = Field(..., description="Brief summary of the checklist")
    destination: str = Field(..., description="Full destination (e.g., 'Sydney, Australia')")
    duration: str = Field(..., description="Stay duration (e.g., '3 months')")
    stay_type: Literal["short-term", "medium-term", "long-term"] = Field(
        ...,
        description="Categorized stay type based on duration"
    )

    # AI-identified city info
    city_info: GeneratedCityInfo

    # AI-generated items
    items: List[GeneratedChecklistItem] = Field(..., description="List of checklist items")


# ========== City Code Mapping ==========
CITY_CODE_MAPPING = {
    # Australia
    "sydney": ["Sydney", "New South Wales", "悉尼", "雪梨"],
    "melbourne": ["Melbourne", "Victoria", "墨尔本"],
    "brisbane": ["Brisbane", "Queensland", "布里斯班"],
    "perth": ["Perth", "Western Australia", "珀斯"],
    "adelaide": ["Adelaide", "South Australia", "阿德莱德"],
    "goldcoast": ["Gold Coast", "黄金海岸"],

    # Canada
    "toronto": ["Toronto", "Ontario", "多伦多"],
    "vancouver": ["Vancouver", "British Columbia", "温哥华"],
    "montreal": ["Montreal", "Quebec", "蒙特利尔"],
    "calgary": ["Calgary", "Alberta", "卡尔加里"],
    "ottawa": ["Ottawa", "渥太华"],

    # China
    "beijing": ["Beijing", "北京"],
    "shanghai": ["Shanghai", "上海"],
    "guangzhou": ["Guangzhou", "广州"],
    "shenzhen": ["Shenzhen", "深圳"],
    "hongkong": ["Hong Kong", "HK", "香港"],
    "chengdu": ["Chengdu", "成都"],
    "chongqing": ["Chongqing", "重庆"],
    "xian": ["Xi'an", "Xian", "西安"],
    "hangzhou": ["Hangzhou", "杭州"],
    "macau": ["Macau", "Macao", "澳门"],

    # Japan
    "tokyo": ["Tokyo", "東京", "东京"],
    "osaka": ["Osaka", "大阪"],
    "kyoto": ["Kyoto", "京都"],

    # Singapore
    "singapore": ["Singapore", "新加坡"],

    # US
    "newyork": ["New York", "NYC", "纽约"],
    "losangeles": ["Los Angeles", "LA", "洛杉矶"],
    "sanfrancisco": ["San Francisco", "SF", "旧金山"],
    "miami": ["Miami", "迈阿密"],
    "seattle": ["Seattle", "西雅图"],
    "chicago": ["Chicago", "芝加哥"],
    "boston": ["Boston", "波士顿"],
    "washingtondc": ["Washington DC", "Washington", "华盛顿"],

    # Europe
    "london": ["London", "伦敦"],
    "paris": ["Paris", "巴黎"],
    "berlin": ["Berlin", "柏林"],
    "amsterdam": ["Amsterdam", "阿姆斯特丹"],
    "dublin": ["Dublin", "都柏林"],
    "edinburgh": ["Edinburgh", "爱丁堡"],
    "manchester": ["Manchester", "曼彻斯特"],
    "munich": ["Munich", "慕尼黑"],
    "hamburg": ["Hamburg", "汉堡"],

    # New Zealand
    "auckland": ["Auckland", "奥克兰"],
    "wellington": ["Wellington", "惠灵顿"],
    "christchurch": ["Christchurch", "基督城"],

    # Middle East
    "dubai": ["Dubai", "迪拜"],

    # Southeast Asia
    "bangkok": ["Bangkok", "曼谷"],
    "bali": ["Bali", "巴厘岛"],
}


def normalize_city_code(city_name: str) -> str:
    """
    Normalize city name to city code.

    Args:
        city_name: City name in any language (e.g., "Sydney", "悉尼", "New South Wales")

    Returns:
        Normalized city code (e.g., "sydney") or "unknown" if not found

    Example:
        >>> normalize_city_code("Sydney")
        'sydney'
        >>> normalize_city_code("悉尼")
        'sydney'
        >>> normalize_city_code("Unknown City")
        'unknown'
    """
    city_name_lower = city_name.lower().strip()

    for code, aliases in CITY_CODE_MAPPING.items():
        if city_name_lower in [alias.lower() for alias in aliases]:
            return code

    return "unknown"
